- name: get remain conf users from server.
  block:
    - name: invoke graphql.
      uri:
        url: "{{ gl_endpoint }}"
        method: POST
        headers:
          x-hasura-admin-secret: "{{ hasura_admin }}"
        body_format: json
        body:
          query: |
            query GetRemainCfgUsers {
              conf_user(where: {server: {ipv4: {_eq: "{{ vpn_server_ip }}"}, state: {_eq: online}}, _and: {state: {_in: [normal, preparing]}}}) {
                id
              }
            }
      register: fetch_users_result
    - name: print out fetch_users_result
      debug:
        var: fetch_users_result
    - name: stop play if users is empty.
      block:
        - name: "end play if fetched users is empty."
          debug:
            msg: "sever is offline, ending play"
        - meta: end_play
      when: (fetch_users_result.json.data.conf_user | length) == 0        
    - name: Check that the previous_user_list file exists
      stat:
        path: "{{ previous_user_list }}"
      register: stat_result
    - name: create empty user file.
      copy:
        content: '{"users": []}'
        dest: "{{ previous_user_list }}"
      when: not stat_result.stat.exists
    - name: read old user list, file format is ["user1", "user2"]
      include_vars:
        file: "{{ previous_user_list }}"
        name: old_users_list
    - name: set fact users.
      set_fact:
        users: "{{ fetch_users_result.json.data.conf_user | map(attribute='id') | map('regex_replace', '-', '') | list}}"
    - name: set fact users_diff.
      set_fact:
        users_diff: "{{ users | difference(old_users_list.users) }}"
    - name: stop play if no new users.
      block:
        - name: "end play if no new users."
          debug:
            msg: "nothing to do, ending play"
        - meta: end_play
      when: (users_diff | default([])) | length == 0

