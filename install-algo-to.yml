---
- name: Add vpn_server_ip to vpn-server
  import_playbook: prepare-group.yml
- name: install algo in target server.
  # gather_facts: false
  hosts: vpn-server
        # ./algo -e '{"provider": "local", "ondemand_cellular": "N", "ondemand_wifi": "N", "ipsec_enabled": false, "dns_adblocking": "N", "ssh_tunneling": "N", "server": "localhost", "endpoint": "94.130.169.110"}'
  vars_files:
    - config.cfg
    - vars/sec.yml
    - vars/cfg.yml
  vars:
    algo_extra_var:
      provider: local
      ondemand_cellular: N
      ondemand_wifi: N
      ipsec_enabled: false
      dns_adblocking: N
      ssh_tunneling: N
      server: localhost
      endpoint: "{{ vpn_server_ip }}"
      store_pki: true
    respme_base: /opt/respme
      # users: []
  tasks:
    # - debug: var=inventory_hostname
    # - debug: var=ansible_hostname
    - debug:
        var: ansible_facts.env
    - debug:
        var: ansible_facts.python
    - debug:
        msg: "{{ algo_extra_var | to_json }}"
    - name: create base directory.
      file:
        path: "{{ respme_base }}"
        state: directory
    - name: save vpn_server_id for late use in cron jobs.
      lineinfile:
        path: "{{ respme_base }}/this_vpn_server_ip"
        line: "{{ vpn_server_ip }}"
        create: yes
    - name: install git and python3-virtualenv
      apt:
        pkg:
          - git
          - python3-virtualenv
        update_cache: yes
    - name: checkout algo
      git:
        repo: https://github.com/jianglibo/algo.git
        dest: "{{ ansible_facts.env.HOME }}/algo"
    - name: install other dependencies
      shell: |
        python3 -m virtualenv --python="$(command -v python3)" .env &&
        source .env/bin/activate &&
        python3 -m pip install -U pip virtualenv &&
        python3 -m pip install -r requirements.txt
      args:
        chdir: ~/algo
        executable: /bin/bash
        creates: ~/algo/.env
    - name: copy vault password
      copy:
        src: "{{ respme_base }}/hetzner.pwd"
        dest: "{{ respme_base }}/hetzner.pwd"
    - name: install ansible-galaxy collection install azure.azcollection
      shell: >-
        source .env/bin/activate &&
        ansible-galaxy collection install azure.azcollection &&
        python3 -m pip install -r ~/.ansible/collections/ansible_collections/azure/azcollection/requirements-azure.txt
      args:
        chdir: ~/algo
        executable: /bin/bash
    - name: install wireguard
      shell: |
        source .env/bin/activate && 
        ./algo --vault-id hetzner@/opt/respme/hetzner.pwd -e '{{ algo_extra_var | to_json }}'
      args:
        chdir: ~/algo
        executable: /bin/bash
        creates: ~/algo/configs/localhost
    - name: notify hub that server is created.
      import_tasks: tasks/server-create-ql.yml
    - name: debug env
      debug:
        var: playbook_dir
    - name: create init users, this is run in ansible script.
      shell: >
        source .env/bin/activate && 
        ./algo update-users --vault-id hetzner@/opt/respme/hetzner.pwd --skip-tags \"debug\" -e '{{ {"server": "localhost", 'vpn_server_ip': vpn_server_ip} }}'
      args:
        chdir: ~/algo
        executable: /bin/bash
    - name: Creates an entry like "SHELL=/bin/bash" on top of crontab
      cron:
        name: SHELL
        env: yes
        job: /bin/bash
    - name: enable cron log
      lineinfile:
        path: /etc/rsyslog.d/50-default.conf
        regexp: '^#(cron\..*)$'
        line: '\1'
        backrefs: yes
      register: log_cfg_changed
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/lineinfile_module.html
    - debug:
        var: log_cfg_changed
    - name: restart rsyslog
      service:
        name: rsyslog
        state: restarted
      when: log_cfg_changed.changed
    - name: Deny everything and enable UFW
      community.general.ufw:
        state: enabled
        policy: allow
    - name: allow open ssh.
      community.general.ufw:
        rule: allow
        name: OpenSSH
    - name: Allow all access to tcp port wireguard_port
      community.general.ufw:
        rule: allow
        port: "{{ wireguard_port | string }}"
        proto: udp
    - name: add cron
      cron:
        name: "update conf user state."
        minute: "{{ 60 | random }}"
        hour: "*/6"
        job: "cd /root/algo && source ./.env/bin/activate && ./algo update-users --vault-id hetzner@/opt/respme/hetzner.pwd --skip-tags \"debug\" -e '{{ {'server': 'localhost', 'vpn_server_ip': vpn_server_ip} }}'"
      
  #  ansible-galaxy collection install community.general   
  # Installing 'community.general:1.2.0' to '/home/jianglibo/.ansible/collections/ansible_collections/community/general'
    # - name: demo command output
    #   command: ls
    #   register: ls_contents
    # - debug:
    #     var: ls_contents

    # - debug: var=hostvars
#cat  /etc/wireguard/wg0.conf
#[Interface]
#Address = 10.19.49.1/24 ,2001:db8:a160::1/48
#ListenPort = 51820
#PrivateKey = mI35hg1bYiXPhyxjs4qS8ukpl3huZdyM68oFu7bZuk8=
#SaveConfig = false
#
#
#[Peer]
## phone
#PublicKey = Dc1+reLwHVTWT/FELrQ6g4v6C3j+NY6PgqOiEIyNI3o=
#PresharedKey = 1KL1/IjfTsoLcQOIXb9eJrU5x79mGQ9BtAaNJXFSrHA=
#AllowedIPs = 10.19.49.2/32,2001:db8:a160::2/128
#
#[Peer]
## laptop
#PublicKey = B3Km3QUrH45BVI+7apP0h26+C49+hToTmNvw4TXCzgA=
#PresharedKey = afEz33Ke4lq05YPONiOGwoQLwbm7g6ga7gNaDnM43q8=
#AllowedIPs = 10.19.49.3/32,2001:db8:a160::3/128
#
#[Peer]
## desktop
#PublicKey = I3wpImNCUjNAd/EdHKciso5vNTxa15jO8hmRAScEC2E=
#PresharedKey = UL/M+hwC/JGHOtD/PtMtlfO8jIxy7Vw7bFBb68Aj1Lk=
#AllowedIPs = 10.19.49.4/32,2001:db8:a160::4/128

# ls algo/configs/localhost/wireguard/
# desktop.conf  desktop.png  laptop.conf  laptop.png  phone.conf  phone.png

# ls algo/configs/localhost/wireguard/apple/ios/
# desktop.mobileconfig  laptop.mobileconfig  phone.mobileconfig

# ls algo/configs/localhost/wireguard/apple/macos/
# desktop.mobileconfig  laptop.mobileconfig  phone.mobileconfig

