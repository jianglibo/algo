---
- name: Add vpn_server_ip to vpn-server
  hosts: localhost
  gather_facts: false
  become: false
  
  tasks:
    - name: Add the droplet to an inventory group
      add_host:
        # name: "{{ vpn_server_ip | default('1.1.1.1') }}"
        name: "{{ vpn_server_ip }}"
        groups: vpn-server
        ansible_ssh_user: root
- name: install algo in target server.
  # gather_facts: false
  hosts: vpn-server
        # ./algo -e '{"provider": "local", "ondemand_cellular": "N", "ondemand_wifi": "N", "ipsec_enabled": false, "dns_adblocking": "N", "ssh_tunneling": "N", "server": "localhost", "endpoint": "94.130.169.110"}'
  vars:
    algo_extra_var:
      provider: local
      ondemand_cellular: N
      ondemand_wifi: N
      ipsec_enabled: false
      dns_adblocking: N
      ssh_tunneling: N
      server: localhost
      endpoint: "{{ vpn_server_ip }}"
  tasks:
    # - debug: var=inventory_hostname
    # - debug: var=ansible_hostname
    - debug:
        var: ansible_facts.env
    - debug:
        var: ansible_facts.python
    - debug:
        msg: "{{ algo_extra_var | to_json }}"
    # - assert:
    #     that:
    #       - "'foo' in 'some_command_result.stdout,foo'"
    #       - ansible_facts.python.executable == '/usr/bin/python3'
    #     fail_msg: "{{ansible_facts.python.executable}} is wrong"
    #     quiet: yes
    #     success_msg: "'my_param' is between 0 and 100"
    - name: install git and python3-virtualenv
      apt:
        pkg:
          - git
          - python3-virtualenv
    - name: checkout algo
      git:
        repo: https://github.com/jianglibo/algo.git
        dest: "{{ ansible_facts.env.HOME }}/algo"
    - name: install other dependencies
      shell: |
        python3 -m virtualenv --python="$(command -v python3)" .env &&
        source .env/bin/activate &&
        python3 -m pip install -U pip virtualenv &&
        python3 -m pip install -r requirements.txt
      args:
        chdir: ~/algo
        executable: /bin/bash
        creates: ~/algo/.env
    - name: install wireguard
      shell: |
        source .env/bin/activate && 
        ./algo -e '{{ algo_extra_var | to_json }}'
      args:
        chdir: ~/algo
        executable: /bin/bash
        creates: ~/algo/configs/localhost
    - name: Creates an entry like "SHELL=/bin/bash" on top of crontab
      cron:
        name: SHELL
        env: yes
        job: /bin/bash
    - name: add cron
      cron:
        name: "check dirs"
        minute: "*/2"
        job: "cd /root/algo && source ./.env/bin/activate && ./algo --skip-tags \"debug\" update-users -e '{{ {'server': 'localhost'} | combine({'users': users | to_json) }}'"
      
      
    # - name: demo command output
    #   command: ls
    #   register: ls_contents
    # - debug:
    #     var: ls_contents

    # - debug: var=hostvars
